Реализовать ThreadPool:
- при создании указывается один параметр - число воркеров, которые будут выполнять задачи.
- метод Enqueue имеет два параметра - объект(ссылку на объект), описывающий задачу, которую надо будет выполнить
(например абстрактного типа с методом .do()) и приоритет(пусть всего будет три приоритета - low, normal, high).
- метод Stop() - ожидает завершения выполняемых (в данный момент) задач, после чего убивает воркеры и возвращает управление.

Enqueue добавляет задачи в очередь на выполнение и возвращает true (если до этого не был вызван Stop - в этом случае Enqueue возвращает false).

Приоритеты обрабатываются следующим образом:
а) low-задачи не выполняются никогда, пока в очереди есть хотя бы одна задача с другим приоритетом.
б) на 3 high-задачи выполняется 1 normal-задача.
Данная логика относится только к выборке задачи из очереди, уже запущенные задачи приоритизировать не требуется.

Изменения в постановке задачи:
    метод '.do()' переименовался в '_do()'

Добавления:
    1. Обработка приоритетов задач происходит в порядке high, normal, low
    2. Если есть свободные воркеры и в очереди нет задач с приоритетом high, то в работу берутся задачи с приоритетом normal
    3. ThreadPool может закончить работу с TP_exception в следующих случаях
        - ошибка при вызове системных функций (pthread_*,...)
    4. ThreadPool не перехватывает исключения, возникающие при вызове C++ std библиотек
    5. ThreadPool в отладочной сборке может аварийно завершиться по assert (ошибки реализации)

Описание:
    Основные классы:
        ThreadPool - реализует запрошенную в задании логику
        Manager - отправляет задачи на выполнение. Ожидает поступления новой задачи или освобождения воркера.
        ThreadPool - очередь ожидающих выполнение задач. Добавляет новые задачи, выдаёт задачи согласно правилам и приоритетам
        Workers - обслуживает выполяняющиеся задачи.

Запуск тестов:
    Task3 <путь к файлу с тестовыми данными>

Описание полей TestSet.json:

    "name" - описание теста, текстовая строка
    "expected" - описание ожилаемого результата
    "tasks" - массив запускаемых задач
        "priority" - приоритет ("hi"|"norm"|"lo")
        "workTimeSec" - время работы задачи
    "workersAmount" - число воркеров
    "delaySecBeforeStop" - задержка после запуска последней задачи перед вызовом Stop()
    Ожидаемый результат:
        "resultSet" - множество отработавших задач
            или
        "result" - массив отработавших задач - учитывается последовательность выполнения
    "stop_after" - вызвать Stop() после запуска задачи с данным порядковым номером

    Если тест заканчивается неудачно, то перед сообщением failed!!! выводится массив или множество номеров отработавших задач.