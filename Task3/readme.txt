Реализовать ThreadPool:
- при создании указывается один параметр - число воркеров, которые будут выполнять задачи.
- метод Enqueue имеет два параметра - объект(ссылку на объект), описывающий задачу, которую надо будет выполнить
(например абстрактного типа с методом .do()) и приоритет(пусть всего будет три приоритета - low, normal, high).
- метод Stop() - ожидает завершения выполняемых (в данный момент) задач, после чего убивает воркеры и возвращает управление.

Enqueue добавляет задачи в очередь на выполнение и возвращает true (если до этого не был вызван Stop - в этом случае Enqueue возвращает false).

Приоритеты обрабатываются следующим образом:
а) low-задачи не выполняются никогда, пока в очереди есть хотя бы одна задача с другим приоритетом.
б) на 3 high-задачи выполняется 1 normal-задача.
Данная логика относится только к выборке задачи из очереди, уже запущенные задачи приоритизировать не требуется.

Изменения в постановке задачи:
    метод '.do()' переименовался в '_do()'

Добавления:
    1. Обработка приоритетов задач происходит в порядке high, normal, low
    2. Если есть свободные воркеры и в очереди нет задач с приоритетом high, то в работу берутся задачи с приоритетом normal
    3. ThreadPool может закончить работу с TP_exception в следующих случаях
        - ошибка при вызове системных функций (pthread_*,...)
    4. ThreadPool не перехватывает исключения, возникающие при вызове C++ std библиотек
    5. ThreadPool в отладочной сборке может аварийно завершиться по assert (ошибки реализации)

Тесты:
    1.0 Задание вычисляет нечто. После Stop() результат становится доступен
    2.0 Задан один воркер, Task1 - delay 3сек, Task2 - delay 1 сек, приоритеты одинаковые. Ok, если будет сообщение только от Task1
    3.0 Задание с приоритетом low не запускается, пока в очереди есть задания с приоритетом norm и hi
    3.1 Задание с приоритетом low запускается, если в очереди нет задач с приоритетом norm и hi
    4.0 Задание с приоритетом norm запускается через каждые 3 запущенные задания с приоритетом hi
    4.1 Задание с приоритетом norm запускается, если в очереди нет заданий с приоритетом hi
    5.0 Никакие задания не запускаются после выполнения Stop()

Описание:
    Основные классы:
        ThreadPool - реализует запрошенную в задании логику
        Manager - отправляет задачи на выполнение. Ожидает поступления новой задачи или освобождения воркера.
        ThreadPool - очередь ожидающих выполнение задач. Добавляет новые задачи, выдаёт задачи согласно правилам и приоритетам
        Workers - обслуживает выполяняющиеся задачи.